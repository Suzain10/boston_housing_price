# -*- coding: utf-8 -*-
"""Boston_Housing_Pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EMD8_JsqqgL0B62x2y0WOH2hUogqYTrK
"""

import pandas as pd
import numpy as np
df = pd.read_csv('Boston Dataset.csv')
df

! pip install ydata_profiling
import matplotlib.pyplot as plt
from ydata_profiling import ProfileReport
profile = ProfileReport(df)
profile.to_file('House_price.html')

df.drop(columns='Unnamed: 0',axis=0,inplace=True)
df

! pip install lazypredict

from sklearn.model_selection import train_test_split
from lazypredict.Supervised import LazyRegressor


# Split the data
X = df.drop("medv", axis=1)
y = df["medv"]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize LazyRegressor
reg = LazyRegressor(verbose=0, ignore_warnings=True, custom_metric=None)

# Train and evaluate models
models, predictions = reg.fit(X_train, X_test, y_train, y_test)

# Display the results
print(models)

from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_absolute_error,  r2_score
import xgboost as xgb

np.random.seed(42)


# Define the hyperparameters and their values for grid search
param_grid = {
    'n_estimators': [100, 200, 300],
    'learning_rate': [0.01, 0.1, 0.2],
    'max_depth': [3, 5, 7],
    'min_child_weight': [1, 3, 5],
    'subsample': [0.6, 0.8, 1.0],
    'colsample_bytree': [0.6, 0.8, 1.0]
}
# Set up GridSearchCV
grid_search = GridSearchCV(estimator=xgb_model, param_grid=param_grid, scoring='neg_mean_absolute_error', cv=3)

# Fit GridSearchCV
grid_search.fit(X_train, y_train)

# Get the best parameters
best_params = grid_search.best_params_
print(f"Best hyperparameters: {best_params}")

# Train the XGBoost model with the best hyperparameters
best_xgb_model = xgb.XGBRegressor(**best_params)
best_xgb_model.fit(X_train, y_train)

# Predict using the optimized XGBoost model
y_pred = best_xgb_model.predict(X_test)

# Calculate MAE
mae = mean_absolute_error(y_test, y_pred)
print(f" XGBoost MAE: {mae}")

# Calculate R-squared
r2 = r2_score(y_test, y_pred)
print(f" XGBoost R-squared: {r2}")

actual_pred_df = pd.DataFrame({'Actual_Values': y_test.values,
    'Predicted_Values': y_pred
})

actual_pred_df.head()

plt.scatter(range(len(y_test)), y_test, color='blue', label='AV')
plt.scatter(range(len(y_pred)), y_pred, color='red', label='PV')
plt.xlabel('Index')
plt.ylabel('Values')
plt.title('Actual vs. Predicted Values')
plt.legend()
plt.show()

